# This block is for HTTP traffic, which will be redirected to HTTPS by Certbot
server {
    listen 80;
    listen [::]:80;
    server_name yourdomain.com www.yourdomain.com; # List all domain names

    # Root for Certbot's HTTP-01 challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# IMPORTANT: The HTTPS server block below will be automatically added and configured by Certbot.
# You don't need to write it initially. Certbot will handle:
# - listen 443 ssl http2;
# - ssl_certificate and ssl_certificate_key paths
# - include /etc/letsencrypt/options-ssl-nginx.conf;
# - ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

# AFTER Certbot runs, it will look something like this.
# You'll then manually ADD the `proxy_set_header` lines within the `location /` block.

# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name yourdomain.com www.yourdomain.com; # List all domain names

#     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem; # Managed by Certbot
#     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem; # Managed by Certbot
#     include /etc/letsencrypt/options-ssl-nginx.conf; # Standard SSL options from Certbot
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # DH params for perfect forward secrecy from Certbot

#     # Location block for all traffic
#     location / {
#         # Proxy requests to your NestJS application service
#         # 'app' is the service name from your docker-compose.yml
#         # '80' is the port your NestJS app listens on internally
#         proxy_pass http://app:80;

#         # Essential proxy headers for correct request forwarding
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme; # Tells your app if the original request was HTTP or HTTPS

#         # *** CRITICAL FOR ACTIVITYPUB HTTP SIGNATURES ***
#         # These headers must be passed unmodified for signature verification
#         proxy_set_header Date $http_date;
#         proxy_set_header Signature $http_signature;
#         proxy_set_header Digest $http_digest;

#         # Disable request/response buffering for real-time applications
#         # This can help with certain ActivityPub scenarios or large payloads
#         proxy_buffering off;
#         proxy_request_buffering off;
#     }
# }