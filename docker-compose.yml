services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # Removed volume mounts for source code and node_modules.
    # The Dockerfile will now handle copying these into the image.
    volumes:
      - ./.env:/app/.env # Keep mounting the .env file
    # The app will listen on its internal port 80. Nginx will connect to it
    # internally via the Docker network using 'http://app:80'.
    # If you need to access your app directly for debugging, you can use:
    # ports:
    #   - "8080:80" # Maps internal app port 80 to host port 8080 (example)
    restart: always
    environment:
      NODE_ENV: production
      # Add any other environment variables your NestJS app needs
    depends_on:
      - db
      - redis
    networks:
      - web_network

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"  # Expose HTTP port 80 to the host
      - "443:443" # Expose HTTPS port 443 to the host
    volumes:
      # --- FIX: Removed ':ro' to allow Certbot to modify Nginx configuration ---
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    restart: always
    networks:
      - web_network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --nginx --agree-tos; sleep 12h & wait $!; done;'" # Handles renewals
    networks:
      - web_network

  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: nestjs_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - web_network

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - web_network

networks:
  web_network:
    driver: bridge

volumes:
  db_data:
  redis_data:
